# This is a basic workflow to help you get started with Actions

name: ImageManagement

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 prepVm:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Azure Login
        if: false
        uses: Azure/login@v1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDS }}
          enable-AzPSSession: true
      - name: Create unique identifier
        id: identifier
        uses: Azure/powershell@v1
        with:
          inlineScript: |
                  $major = Get-Date -format yyyy
                  $minor = Get-Date -format MMdd
                  $patch = env:GITHUB_RUN_NUMBER
                  $($major.$minor.$patch)
                  echo "identifier=$($major.$minor.$patch)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
                  Write-Output "::set-output name=identifier2::$($major.$minor.$patch)"
          azPSVersion: latest     
      - name: step-2
        run: echo "${{ steps.identifier.outputs.identifier2 }}"
      - name: step-3
        run: echo "${{ env.identifier }}"
      - name: Create temp resourcegroup
        if: false
        id: tempRg
        uses: Azure/powershell@v1
        with:
          inlineScript: |
                $resourceGroup = New-AzResourceGroup -ResourceGroup rg-"${{ env.identifier }}" -Location "WestEurope" -Force:$true
                Write-Host '::set-output name=resourceGroupName::$($resourceGroup.ResourceGroupName)'
          azPSVersion: latest      
      - name: Create Initial VM
        if: false
        uses: Azure/powershell@v1
        with:
          inlineScript: |
                $parameters = @{
                  resourcegroupname = "${{ steps.tempRg.outputs.resourceGroupName }}"
                  virtualMachineName = "${{ steps.identifier.outputs.identifier }}"
                  ImagePublisher = microsoftwindowsdesktop 
                  ImageOffer = windows11preview
                  ImageSKU = win11-21h2-avd
                }
                ./ImageManagement/Scripts/deploy-initial-vm.ps1 @parameters
          azPSVersion: latest
      - name: Deploy Application
        if: false
        uses: Azure/powershell@v1
        with:
          inlineScript: |
                $manifestFile = "https://github.com/microsoft/winget-pkgs/tree/master/manifests/g/Google/Chrome/96.0.4664.45"
                $appName = "Chrome"
                $parameters = @{
                    ResourceGroupName = "rg-${runId}"
                    vmName            = "imgmgt"
                    Location          = 'westeurope'
                    FileUri           = "https://raw.githubusercontent.com/srozemuller/AVD/main/OperationNorthStar/Scripts/WinGet/Install-WinGetApplication.ps1"
                    Argument          = "-task install -ManifestFileLocation $manifestFile"
                    Name              = $appName
                    ForceReRun        = $true
                }
                Set-AzVMCustomScriptExtension -Run 'Install-WinGetApplication.ps1' @parameters
          azPSVersion: latest
